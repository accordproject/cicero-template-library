/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace com.docusign.clauses.custom

import com.docusign.connect.*
import org.accordproject.time.*

define function field(fl:CustomField[],n:String) : String? {
  return
    singleton(
      foreach x in fl
      where x.name = n
      return x.value
    )
}
define function fieldAsString(fl:CustomField[],n:String) : String {
  match field(fl,n)
  with let? v then return v
  else return ""
}
define function fieldAsDouble(fl:CustomField[],n:String) : Double {
  return double(fieldAsString(fl,n))
}
define function fieldAsDateTime(fl:CustomField[],n:String) : DateTime {
  return dateTime(fieldAsString(fl,n))
}
define function getCustomFields(env:DocuSignEnvelopeInformation) : CustomField[] {
  match env.customFields
  with let? x then return x
  else return []
}

define function matchesTabName(tabStatus:TabStatus,n:String) : Boolean {
  if (tabStatus.tabLabel = n) then return true
  else
  match tabStatus
    with let t : NumberTabStatus then return t.tabName = some(n)
    with let t : DateTabStatus then return t.tabName = some(n)
    with let t : TextTabStatus then return t.tabName = some(n)
    else return false
}

define function findTab(tabStatuses:TabStatus[],n:String) : TabStatus? {
  return
    singleton(
      foreach x in tabStatuses
      where matchesTabName(x,n)
      return x
    )
}

define function findTabAsNumber(tabStatuses:TabStatus[],n:String) : Double? {
  match findTab(tabStatuses, n)
  with let? x : NumberTabStatus then return x.tabValue
  else return none
}

define function findTabAsDate(tabStatuses:TabStatus[],n:String) : DateTime? {
  match findTab(tabStatuses, n)
  with let? x : DateTabStatus then return x.tabValue
  else return none
}

define function findTabAsText(tabStatuses:TabStatus[],n:String) : String? {
  match findTab(tabStatuses, n)
  with let? x : TextTabStatus then return x.tabValue
  else return none
}

define function getAllTabStatuses(recipients:Recipient[]) : TabStatus[] {
  return
    flatten(foreach r in recipients
    return
      match r.tabStatuses
      with let? x then x
      else [])
}

define function getNumberTabFromRecipients(env:DocuSignEnvelopeInformation,n:String) : Double? {
  return
    match env.recipients
    with let? x then findTabAsNumber(getAllTabStatuses(x),n)
    else none
}

define function getDateTabFromRecipients(env:DocuSignEnvelopeInformation,n:String) : DateTime? {
  return
    match env.recipients
    with let? x then findTabAsDate(getAllTabStatuses(x),n)
    else none
}

define function getTextTabFromRecipients(env:DocuSignEnvelopeInformation,n:String) : String? {
  return
    match env.recipients
    with let? x then findTabAsText(getAllTabStatuses(x),n)
    else none
}
