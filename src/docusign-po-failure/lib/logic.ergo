/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace com.docusign.clauses

import com.docusign.connect.*
import org.accordproject.cicero.runtime.*
import org.accordproject.money.*
import org.accordproject.time.*
import com.docusign.clauses.custom.*

define function failuresInRange(pastFailures:DateTime[],range:Duration) : DateTime[] {
  return
	  foreach d in pastFailures
		where isAfter(d,subtractDuration(now(),range))
		return d
}

contract PurchaseOrderFailureContract over PurchaseOrderFailure state PurchaseOrderFailureState {
  clause init(request:Request) : Response {
    set state PurchaseOrderFailureState {
      stateId: "1",
      pastFailures: [],
			nbPastFailures: 0
    };
    return Response{}
  }

  clause execute(request:DocuSignEnvelopeInformation) : PurchaseOrderFailureResponse emits PaymentObligation {
    let fields = getCustomFields(request);
    let deliveryDate = fieldAsDateTime(fields,"deliveryDate");
    let actualPrice = fieldAsDouble(fields,"actualPrice");
    let currencyCode = fieldAsString(fields,"currencyCode");

    // Check that the delivery is late, If not, no penalty should be applied
    enforce isAfter(now(),addDuration(deliveryDate,contract.lateOne))
    else return PurchaseOrderFailureResponse{
      penalty : MonetaryAmount{ doubleValue: 0.0, currencyCode: currencyCode }
    };

    // If the delivery is late, calculate the penalty percentage based on how late it is
    let penaltyPercent =
      if (isAfter(now(),addDuration(deliveryDate,contract.lateThree)))
      then contract.lateThreePercent
      else if (isAfter(now(),addDuration(deliveryDate,contract.lateTwo)))
      then contract.lateTwoPercent
      else contract.lateOnePercent;

    // Maintain the past failures within range, as part of the contract state
		let failures = failuresInRange(arrayAdd(state.pastFailures,[deliveryDate]),contract.failureRange);
    set state PurchaseOrderFailureState {
      stateId: state.stateId,
      pastFailures: failures,
			nbPastFailures: count(failures)
    };

    // Calculate the penalty
		let penaltyAmount =
			if state.nbPastFailures >= contract.maxFailures
		  then penaltyPercent / 100.0 * actualPrice + contract.repeatedFailureCompensation.doubleValue
		  else penaltyPercent / 100.0 * actualPrice;
    let penalty = MonetaryAmount{
      doubleValue: penaltyAmount,
      currencyCode: currencyCode
    };

    // Emit a payment obligation
    emit PaymentObligation{
      contract: contract,
      promisor: none,
      promisee: some(contract.buyer),
      deadline: none,
      amount: penalty,
      description: contract.buyer.partyId ++ " should be paid a penalty"
    };

    return PurchaseOrderFailureResponse{
      penalty : penalty
    }
  }
}
