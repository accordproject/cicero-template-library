/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace com.docusign.clauses

import com.docusign.connect.*
import org.accordproject.cicero.runtime.*
import org.accordproject.money.*
import org.accordproject.time.*
import com.docusign.clauses.custom.*

define function failuresInRange(pastFailures:DateTime[],range:Duration) : DateTime[] {
  return
    foreach d in pastFailures
    where isAfter(d,subtractDuration(now(),range))
    return d
}

define function mapTextToCurrencyCode(text:String) : CurrencyCode? {
	// XXX Should there be any restriction on which currency is supported?
	let allCodes = [
		AED, AFN, ALL, AMD, ANG, AOA, ARS, AUD, AWG, AZN, BAM, BBD, BDT, BGN, BHD, BIF, BMD, BND,
		BOB, BOV, BRL, BSD, BTN, BWP, BYN, BZD, CAD, CDF, CHE, CHF, CHW, CLF, CLP, CNY, COP, COU,
		CRC, CUC, CUP, CVE, CZK, DJF, DKK, DOP, DZD, EGP, ERN, ETB, EUR, FJD, FKP, GBP, GEL, GHS,
		GIP, GMD, GNF, GTQ, GYD, HKD, HNL, HRK, HTG, HUF, IDR, ILS, INR, IQD, IRR, ISK, JMD, JOD,
		JPY, KES, KGS, KHR, KMF, KPW, KRW, KWD, KYD, KZT, LAK, LBP, LKR, LRD, LSL, LYD, MAD, MDL,
		MGA, MKD, MMK, MNT, MOP, MRU, MUR, MVR, MWK, MXN, MXV, MYR, MZN, NAD, NGN, NIO, NOK, NPR,
		NZD, OMR, PAB, PEN, PGK, PHP, PKR, PLN, PYG, QAR, RON, RSD, RUB, RWF, SAR, SBD, SCR, SDG,
		SEK, SGD, SHP, SLL, SOS, SRD, SSP, STN, SVC, SYP, SZL, THB, TJS, TMT, TND, TOP, TRY, TTD,
		TWD, TZS, UAH, UGX, USD, USN, UYI, UYU, UZS, VEF, VND, VUV, WST, XAF, XAG, XAU, XBA, XBB,
		XBC, XBD, XCD, XDR, XOF, XPD, XPF, XPT, XSU, XTS, XUA, XXX, YER, ZAR, ZMW, ZWL
  ];
	return singleton(
    foreach c in allCodes
		where toString(c) = text
    return c
	)
}

contract PurchaseOrderFailureContract over PurchaseOrderFailure state PurchaseOrderFailureState {
  clause init(request:Request) : Response {
    set state PurchaseOrderFailureState {
      stateId: "1",
      pastFailures: [],
      nbPastFailures: 0
    };
    return Response{}
  }

  clause execute(request:DocuSignEnvelopeInformation) : PurchaseOrderFailureResponse emits PaymentObligation {
    let deliveryDateOpt = getDateTabFromRecipients(request,"deliveryDate");
    let actualPriceOpt = getNumberTabFromRecipients(request,"actualPrice");
    let currencyTextOpt = getTextTabFromRecipients(request,"currencyCode");

    enforce deliveryDateOpt != none
    else throw failure("Could not find a deliveryDate tab");
    let deliveryDate = deliveryDateOpt ?? dateTime("1970-01-01");

    enforce actualPriceOpt != none
    else throw failure("Could not find an actualPrice tab");
    let actualPrice = actualPriceOpt ?? nan;

    enforce currencyTextOpt != none
    else throw failure("Could not find a currencyCode tab");
    let currencyText = currencyTextOpt ?? "";

    let currencyCodeOpt = mapTextToCurrencyCode(currencyText);

    enforce currencyCodeOpt != none
    else throw failure(`Unknown currency code: {{% currencyText %}}`);
    let currencyCode = currencyCodeOpt ?? USD;

    // Check that the delivery is late, If not, no penalty should be applied
    enforce isAfter(now(),addDuration(deliveryDate,contract.lateOne))
    else return PurchaseOrderFailureResponse{
      penalty : MonetaryAmount{ doubleValue: 0.0, currencyCode: currencyCode }
    };

    // If the delivery is late, calculate the penalty percentage based on how late it is
    let penaltyPercent =
      if (isAfter(now(),addDuration(deliveryDate,contract.lateThree)))
      then contract.lateThreePercent
      else if (isAfter(now(),addDuration(deliveryDate,contract.lateTwo)))
      then contract.lateTwoPercent
      else contract.lateOnePercent;

    // Maintain the past failures within range, as part of the contract state
    let failures = failuresInRange(arrayAdd(state.pastFailures,[deliveryDate]),contract.failureRange);
    set state PurchaseOrderFailureState {
      stateId: state.stateId,
      pastFailures: failures,
      nbPastFailures: count(failures)
    };

    // Calculate the penalty
    let penaltyAmount =
      if state.nbPastFailures >= contract.maxFailures
      then penaltyPercent / 100.0 * actualPrice + contract.repeatedFailureCompensation.doubleValue
      else penaltyPercent / 100.0 * actualPrice;
    let penalty = MonetaryAmount{
      doubleValue: penaltyAmount,
      currencyCode: currencyCode
    };

    // Emit a payment obligation
    emit PaymentObligation{
      contract: contract,
      promisor: none,
      promisee: some(contract.buyer),
      deadline: none,
      amount: penalty,
      description: contract.buyer.partyId ++ " should be paid a penalty"
    };

    return PurchaseOrderFailureResponse{
      penalty : penalty
    }
  }
}
