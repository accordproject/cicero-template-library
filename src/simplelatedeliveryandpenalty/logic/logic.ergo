/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.accordproject.simplelatedeliveryandpenalty

import org.accordproject.obligation.*
import org.accordproject.time.*
import org.accordproject.money.*

contract SimpleLateDeliveryAndPenalty over SimpleLateDeliveryAndPenaltyContract {
  clause latedeliveryandpenalty(request : SimpleLateDeliveryAndPenaltyRequest) : SimpleLateDeliveryAndPenaltyResponse emits PaymentObligation {
    // Guard against calling late delivery clause too early
    let agreed = request.agreedDelivery;
    enforce isBefore(agreed,now()) else
    throw Error{ message : "Cannot exercise late delivery before delivery date" };

    // Calculate the time difference between current date and agreed upon date
    let diff : Duration = diffDurationAs(now(),agreed,~org.accordproject.time.TemporalUnit.days);
    let diffRatio : Double = divideDuration(diff,durationAs(contract.penaltyDuration,~org.accordproject.time.TemporalUnit.days));
    // Penalty formula
    let penalty = diffRatio * contract.penaltyPercentage/100.0 * request.goodsValue;
    // Penalty may be capped
    let capped = min([penalty, contract.capPercentage/100.0 * request.goodsValue]);
    // Return a Payment Obligation
    // Return the response with the penalty and termination determination
    emit PaymentObligation{
      contract: contract,
      promisor: some(contract.seller),
      promisee: some(contract.buyer),
      deadline: none,
      amount: MonetaryAmount{ doubleValue: capped, currencyCode: USD },
      description: toString(contract.seller) ++ " should pay penalty amount to " ++ toString(contract.buyer)
    };
    return SimpleLateDeliveryAndPenaltyResponse{
      penalty: capped,
      buyerMayTerminate: diff.amount > durationAs(contract.maximumDelay,~org.accordproject.time.TemporalUnit.days).amount
    }
  }
}
