/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.accordproject.payment.fullupondemand

import org.accordproject.cicero.runtime.*
import org.accordproject.payment.PaymentReceived

contract FullPaymentUponDemandContract over FullPaymentUponDemandTemplate state FullPaymentUponDemandState {
  
  clause init(request : Request) : Response {   
    set state FullPaymentUponDemandState {
      stateId: "1",
      status: "INITIALIZED"
    };
    return Response{}
  }

  
  clause paymentDemand(request : PaymentDemand) : Response emits PaymentObligation {
    enforce (state.status = "INITIALIZED") 
    	else throw ErgoErrorResponse{ message: "Payment has already been demanded." };
    
    emit PaymentObligation{
      contract: contract,
      promisor: some(contract.buyer),
      promisee: some(contract.seller),
      deadline: none,
      amount: contract.value,
      description: contract.buyer.partyId ++ " should pay contract amount to " ++ contract.seller.partyId
    };
    
    set state FullPaymentUponDemandState {
      stateId: "1",
      status: "OBLIGATION_EMITTED"
    };
    
    return Response{}
  }
  clause paymentReceived(request : PaymentReceived): Response {
    
    enforce (state.status = "OBLIGATION_EMITTED") 
    else throw ErgoErrorResponse{ message: "Either a payment obligation hasn't yet been emitted by the contract or payment notification has already been received" };
    
    set state FullPaymentUponDemandState {
      stateId: state.stateId,
      status: "COMPLETED"
    };
    
    return Response{}
  }
}

