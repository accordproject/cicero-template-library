/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.cloudsecurityalliance.supplyagreement
import org.accordproject.cicero.runtime.*
import org.accordproject.time.*

contract SupplyAgreementLogic over SupplyAgreementContract state SupplyAgreementState {
  clause init(request : Request) : Response {
    set state SupplyAgreementState{
      stateId: "0",
      sensorReadings: []
    };
    return Response{}
  }

  clause sensorReading(reading : SensorReading) : DeliveryResponse {
    set state.sensorReadings = arrayAdd(state.sensorReadings, [reading]);
    return DeliveryResponse{ message: "Sensor reading received", inGoodOrder: true }
  }

  clause checkContract(check : CheckContract) : DeliveryResponse {
    // enforce isAfter( reading, executionDate) else throw failure("The contract is not yet executed (active).");
    let numberOfDays = diffDurationAs(executionDate, now(), hours).amount / 24;
    let requiredReadingCount = numberOfDays * 10;
    let sufficientReadings = if count(state.sensorReadings) >= requiredReadingCount then true else false;
    let message = if sufficientReadings 
      then 
        "Delivery is in good order" 
      else 
        "Insufficient sensor readings. Received " ++ toText(count(state.sensorReadings)) ++ " readings. Required: " ++ toText(requiredReadingCount);
    return DeliveryResponse{ message: message, inGoodOrder: sufficientReadings }
  }
}