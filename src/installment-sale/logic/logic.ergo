/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.accordproject.installmentsale

import org.accordproject.runtime.*
import org.accordproject.obligation.*
import org.accordproject.money.*

define function round(x:Double) {
    return floor(x + 0.5)
}

define function roundn(x:Double, n:Integer) {
    let nd = integerToDouble(n);
    let e = 10.0 ^ nd;
    return round(x * e) / e
}

contract InstallmentSale over InstallmentSaleContract state InstallmentSaleState {
  clause init(request : Request) : Response {
    set state InstallmentSaleState{
      status: WaitingForFirstDayOfNextMonth,
      balance_remaining: contract.INITIAL_DUE,
      total_paid: MonetaryAmount{ doubleValue : 0.0, currencyCode : contract.INITIAL_DUE.currencyCode },
      next_payment_month: contract.FIRST_MONTH
    };
    // Ensuring that INITIAL_DUE, TOTAL_DUE_BEFORE_CLOSING, MIN_PAYMENT, and DUE_AT_CLOSING all has the same currencyCode
    enforce (contract.INITIAL_DUE.currencyCode = contract.TOTAL_DUE_BEFORE_CLOSING.currencyCode) 
        and (contract.INITIAL_DUE.currencyCode = contract.MIN_PAYMENT.currencyCode) 
        and (contract.INITIAL_DUE.currencyCode = contract.DUE_AT_CLOSING.currencyCode)
    else throw failure("Same currency code should be used across the contract");
    
    return Response{}
  }

  clause PayInstallment(request : Installment) : Balance emits PaymentObligation {
    //enforce (state.status = WaitingForFirstDayOfNextMonth); // Make sure this is only called in the right state
    enforce (contract.MIN_PAYMENT.doubleValue <= state.balance_remaining.doubleValue) 
    else throw failure ("Payment cannot be made. The balance remaining is less than the minimum payment amount.");
    enforce (state.next_payment_month < 23) 
    else throw failure ("The payment is due within 24 months, please pay the last installment instead.");
    enforce (contract.MIN_PAYMENT.doubleValue <= request.amount.doubleValue); // Underpaying is forbidden
    enforce (request.amount.doubleValue <= state.balance_remaining.doubleValue); // overpaying is forbidden. this is NOT checked statically.
    enforce (contract.INITIAL_DUE.currencyCode = request.amount.currencyCode); // Checks that the installment payment and initial due has the same currency

    let before_interest = roundn((state.balance_remaining.doubleValue - request.amount.doubleValue), 2);
    let balance = roundn((before_interest * (1.0 + contract.INTEREST_RATE/100.00)), 2);
    let total_paid = roundn((state.total_paid.doubleValue + request.amount.doubleValue), 2);

    // roundn function is used to round up the amounts to 2 decimal points to reflect common currency notation

    set state InstallmentSaleState{
      status: WaitingForFirstDayOfNextMonth,
      balance_remaining: MonetaryAmount{ doubleValue : balance, currencyCode : contract.INITIAL_DUE.currencyCode},
      total_paid: MonetaryAmount{ doubleValue : total_paid, currencyCode : contract.INITIAL_DUE.currencyCode},
      next_payment_month: state.next_payment_month + 1
    };
    emit PaymentObligation{
      contract: contract,
      promisor: some(contract.BUYER),
      promisee: some(contract.SELLER),
      deadline: none,
      amount: MonetaryAmount{ doubleValue : request.amount.doubleValue, currencyCode : request.amount.currencyCode },
      description: toString(contract.BUYER) ++ " should pay installment to " ++ toString(contract.SELLER)
    };
    return Balance{
      balance: MonetaryAmount{ doubleValue : balance, currencyCode : contract.INITIAL_DUE.currencyCode },
      total_paid: MonetaryAmount{ doubleValue : total_paid, currencyCode : contract.INITIAL_DUE.currencyCode },
    }
  }
  
  clause PayLastInstallment(request : ClosingPayment) : Balance emits PaymentObligation {
    enforce (roundn(request.amount.doubleValue, 2) = roundn(state.balance_remaining.doubleValue + contract.DUE_AT_CLOSING.doubleValue, 2))
    else throw failure ("The last installment payment should be equal to the sum of remaining balance plus the amount due at closing.");

    let balance =  MonetaryAmount{ doubleValue : 0.0, currencyCode : contract.INITIAL_DUE.currencyCode};
    let total_paid = MonetaryAmount{ doubleValue : state.total_paid.doubleValue + request.amount.doubleValue, currencyCode : contract.INITIAL_DUE.currencyCode};

    set state InstallmentSaleState{
      status: Fulfilled,
      balance_remaining: balance,
      total_paid: total_paid,
      next_payment_month: 0
    };

    emit PaymentObligation{
      contract: contract,
      promisor: some(contract.BUYER),
      promisee: some(contract.SELLER),
      deadline: none,
      amount: MonetaryAmount{ doubleValue : request.amount.doubleValue, currencyCode : request.amount.currencyCode },
      description: toString(contract.BUYER) ++ " should pay installment to " ++ toString(contract.SELLER)
    };

    return Balance{
      balance: balance,
      total_paid: total_paid,
    } 
  } 
}
