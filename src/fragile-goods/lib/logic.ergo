/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace io.clause.demo.fragileGoods

import org.accordproject.cicero.runtime.*
import org.accordproject.cicero.contract.*
import org.accordproject.money.MonetaryAmount

define function createPaymentObligation(
    acontract:AccordContract,
    seller:AccordParty,
    buyer:AccordParty,
    amount: MonetaryAmount
  ) : PaymentObligation {
  return
    PaymentObligation{
      contract: acontract,
      promisor: some(seller),
      promisee: some(buyer),
      deadline: none,
      amount: amount,
      description:
        "penalty payment owed by "
          ++ seller.partyId
          ++ " to " ++ buyer.partyId
          ++ " for delivery of fragile goods, including delays"
    }
}

contract FragileGoods over FragileGoodsClause {
  clause fragilegoods(request : DeliveryUpdate) : PayOut emits PaymentObligation {
    let amount = contract.deliveryPrice.doubleValue;
    let currency = contract.deliveryPrice.currencyCode;
    let shocks =
      integerToDouble(count(
        foreach r in request.accelerometerReadings
        where r > contract.accelerationMax or r < contract.accelerationMin
        return r
    ));
    let amount = amount - shocks * contract.accelerationBreachPenalty.doubleValue;

    enforce request.status = "ARRIVED" and request.finishTime != none
    else return PayOut{
      amount: MonetaryAmount{
        doubleValue: amount,
        currencyCode: currency
      }
    };

    match request.finishTime
    with let? finishTime then
      if contract.deliveryLimitDuration.unit = "seconds"
      then
        let duration = dateTimeDiffSeconds(finishTime, request.startTime);
        if (duration) > contract.deliveryLimitDuration.amount then
          let monetaryAmount = MonetaryAmount{
            doubleValue: amount - contract.lateDeliveryPenalty.doubleValue,
            currencyCode: currency
          };
          emit createPaymentObligation(contract,contract.seller,contract.buyer,monetaryAmount);
          return PayOut{
            amount: monetaryAmount
          }
        else 
          let monetaryAmount = MonetaryAmount{
            doubleValue: amount,
            currencyCode: currency
          };
          emit createPaymentObligation(contract,contract.seller,contract.buyer,monetaryAmount);
          return PayOut{ 
            amount: monetaryAmount
          }
      else throw ErgoErrorResponse{ message: "Unit not implemented" }
    else throw ErgoErrorResponse{ message: "Finish time not present" }
  }
}

