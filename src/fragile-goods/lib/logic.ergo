/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace io.clause.demo.fragileGoods

import org.accordproject.cicero.runtime.*

contract FragileGoods over FragileGoodsClause {
  clause fragilegoods(request : DeliveryUpdate) : PayOut throws ErrorResponse emits PaymentObligation {
    let amount = contract.deliveryPrice.doubleValue;
    let currency = contract.deliveryPrice.currencyCode;
    let shocks =
      count(
        foreach r in request.accelerometerReadings
        where r > contract.accelerationMax or r < contract.accelerationMin
        return r
      );
    let amount = amount - shocks * contract.accelerationBreachPenalty.doubleValue;

    enforce request.status = "ARRIVED" and request.finishTime != nil
    else return new PayOut{
		  amount: new org.accordproject.money.MonetaryAmount {
				doubleValue: amount,
				currencyCode: currency
			}
		};

    match request.finishTime
    with let finishTime? then
      if contract.deliveryLimitDuration.unit = "seconds"
      then
        let duration = momentDiffSeconds(finishTime, request.startTime);
        if (duration) > contract.deliveryLimitDuration.amount then
          let monetaryAmount = new org.accordproject.money.MonetaryAmount {
            doubleValue: amount - contract.lateDeliveryPenalty.doubleValue,
            currencyCode: currency
          };
          emit new org.accordproject.cicero.runtime.PaymentObligation {
            contract: "NOT_SET",
            promisor: "Buyer",
            promisee: "Supplier",
            amount: monetaryAmount,
            description: "Buyer should pay contract amount to the Supplier"
          };
          return new PayOut{
            amount: monetaryAmount
          }
        else 
          let monetaryAmount = new org.accordproject.money.MonetaryAmount {
            doubleValue: amount,
            currencyCode: currency
          };
          emit new org.accordproject.cicero.runtime.PaymentObligation {
            contract: "NOT_SET",
            promisor: "Buyer",
            promisee: "Supplier",
            amount: monetaryAmount,
            description: "Buyer should pay contract amount to the Supplier"
          };
          return new PayOut { 
            amount: monetaryAmount
          }
      else throw new ErrorResponse{ message: "Unit not implemented" }
    else throw new ErrorResponse{ message: "Finish time not present" }
  }
}

