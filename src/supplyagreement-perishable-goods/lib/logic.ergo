namespace org.accordproject.perishablegoods

import org.accordproject.perishablegoods.contract.*
import org.accordproject.cicero.runtime.*

// Auxiliary function calculating penalty from temperature readings
define function calculateTempPenalty(minTemperature : Double,
                                     maxTemperature : Double,
                                     penaltyFactor : Double,
                                     readings : SensorReading[]) : Double {
  let tempReadings = foreach x in readings return x.centigrade;
  // find the lowest temperature reading
  let lowestReading = min(tempReadings);
  // find the highest temperature reading
  let highestReading = max(tempReadings);
  if lowestReading < minTemperature  then 
    return (minTemperature - lowestReading) * penaltyFactor
  else if highestReading > maxTemperature then 
    return (highestReading - maxTemperature) * penaltyFactor
  else 
    return 0.0
}

// Auxiliary function calculating penalty from humidity readings
define function calculateHumPenalty(minHumidity : Double,
                                    maxHumidity : Double,
                                    penaltyFactor : Double,
                                    readings : SensorReading[]) : Double {
  let humReadings = foreach x in readings return x.humidity;
  // find the lowest humidity reading
  let lowestReading = min(humReadings);
  // find the highest temperature reading
  let highestReading = max(humReadings);
  if lowestReading < minHumidity then 
    return (minHumidity - lowestReading) * penaltyFactor
  else if highestReading > maxHumidity then 
    return (highestReading - maxHumidity) * penaltyFactor
  else 
    return 0.0
}

contract SupplyAgreement over SupplyAgreementPerishableGoodsContract {
  clause perishableGoods(request : ShipmentReceived) : PriceCalculation throws ErrorResponse {
    // Guard against unitCount outside the bounds specified in the clause
    enforce (request.unitCount >= contract.minUnits) and (request.unitCount <= contract.maxUnits)
    else throw "Units received out of range for the contract.";
    
    // Guard against missing temperature readings
    enforce count(request.shipment.sensorReadings) > 0.0
    else throw "No temperature readings received.";

    let zeroMoney = MonetaryAmount{
      doubleValue: 0.0,
      currencyCode: contract.unitPrice.currencyCode
    };
    // Guard against requests for payout after the dueDate
    enforce momentIsBefore(now(), moment(contract.dueDate))
    else return PriceCalculation{
      shipment : request.shipment,
      totalPrice : zeroMoney,
      penalty : zeroMoney,
      late : true
    };

    // Calculates payout
    let payOut = contract.unitPrice.doubleValue * request.unitCount;
    // Calculates penalty if any
    let penalty =
      calculateTempPenalty(contract.minTemperature,
                           contract.maxTemperature,
                           contract.penaltyFactor,
                           request.shipment.sensorReadings)
      + calculateHumPenalty(contract.minHumidity,
                          contract.maxHumidity,
                          contract.penaltyFactor,
                          request.shipment.sensorReadings);

    // Returns a Price calculation, applying any penalities
    let totalPenalty = MonetaryAmount{
      doubleValue: penalty * request.unitCount,
      currencyCode: contract.unitPrice.currencyCode
    };
    let totalPrice = MonetaryAmount{
      doubleValue: max([payOut - totalPenalty.doubleValue, 0.0]),
      currencyCode: contract.unitPrice.currencyCode
    };
    emit PaymentObligation{
      contract: contract.contractId,
      promisor: contract.importer,
      promisee: contract.grower,
      amount: totalPrice,
      description: contract.grower ++ " must pay " ++ contract.importer ++ " " ++ totalPrice
    };
    return PriceCalculation{
      shipment : request.shipment,
      totalPrice : totalPrice,
      penalty : totalPenalty,
      late : false
    }
  }
}
