/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.accordproject.minilatedeliveryandpenalty

import org.accordproject.time.*

contract MiniLateDelivery over MiniLateDeliveryClause {
  clause latedeliveryandpenalty(request : LateRequest) : LateResponse {
    // 1. Check if the late delivery clause applies
    let agreed = request.agreedDelivery;
    let delivery = request.deliveredAt;

    enforce isAfter(delivery, agreed)
    else throw ErgoErrorResponse{ message : "Cannot exercise late delivery before delivery date" };

    // 2. Penalty formula
    let delay = diffDurationAs(delivery,agreed,"days");       // Delay in days
    let penaltyStep = contract.penaltyDuration;               // Penalty steps

    let penalty =
      divideDuration(delay,penaltyStep)
    * contract.penaltyPercentage/100.0
    * request.goodsValue;

    // 3. Apply the penalty cap
    let cap =
      contract.capPercentage / 100.0   // 55%
    * request.goodsValue;              // x goodsValue

    let cappedPenalty =
      if penalty > cap                 // above cap?
      then cap
      else penalty;

    // 4. Can the buyer terminate?
    let maxDays = durationAs(contract.maximumDelay,"days");
    let termination = delay.amount > maxDays.amount;

    // 5. Return the response
    return LateResponse{
      penalty: cappedPenalty,        // Capped penalty
      buyerMayTerminate: termination
    }
  }
}
